import { useState, useEffect, useRef } from 'react';

declare global {
    interface Window {
        sensitivity?: string;
    }
}

function App() {
    const [sensitivity, setSensitivity] = useState('medium');
    const [language, setLanguage] = useState<'ko' | 'en'>('en');
    const [showDropdown, setShowDropdown] = useState(false);
    const [showTooltip, setShowTooltip] = useState(false);
    const [hoveredSensitivity, setHoveredSensitivity] = useState<string | null>(null);
    const dropdownRef = useRef<HTMLDivElement>(null);

    const text = {
        en: {
            title: 'Fake Review Detector',
            sensitivity: 'Sensitivity',
            options: ['Sensitive', 'Balanced', 'Precise'],
            start: 'Run Detector',
            tooltip: '‚ùì : What counts as a fake review?\n' +
                'Any review that is generated by AI/bots, written for compensation (money, free products, etc.), or otherwise lacks credibility due to undisclosed conflicts of interest.\n' +
                '(U.S. FTC ‚ÄúFake Reviews and Testimonials‚Äù Final Rule, Aug 14 2024)\n\n' +
                '[Detection process]\n' +
                '1. ML stage 1 ‚Äì The model scores review text and metadata.\n' +
                '2. n-gram stage 2 ‚Äì A dictionary of phrases common in fake-review corpora provides a second filter.\n' +
                '‚Üí A review is labeled fake only if it passes both stages.\n\n' +
                '[Data collected & security]\n' +
                '- Fields collected: review text, review ID, image presence only\n' +
                '- No personally identifiable information is collected or stored.\n\n' +
                '[Disclaimer]\n' +
                'These results are for reference only and may contain errors.\n' +
                'If you see a review that seems mis-flagged, please let us know.',
            sensitivityTooltip: {
                low: '‚ùó Sensitive: Casts a wide net, including subtle fake reviews.',
                medium: '‚öñÔ∏è Balanced: Reasonable balance between false positives and negatives.',
                high: 'üéØ Precise: Shows only high-confidence fake reviews.',
            },
        },
        ko: {
            title: 'Í∞ÄÏßú Î¶¨Î∑∞ ÌÉêÏßÄÍ∏∞',
            sensitivity: 'ÎØºÍ∞êÎèÑ',
            options: ['ÎØºÍ∞ê', 'Í∑†Ìòï', 'Ï†ïÎ∞Ä'],
            start: 'ÌÉêÏßÄ ÏãúÏûë',
            tooltip: '‚ùì : Í∞ÄÏßú Î¶¨Î∑∞ÎûÄ?\n' +
                'AI¬∑Î¥áÏúºÎ°ú ÏûêÎèô ÏûëÏÑ±Îêú Î¶¨Î∑∞, Í∏àÏ†Ñ¬∑Î¨¥Î£å Ï†úÌíà Îì± ÎåÄÍ∞ÄÎ•º Î∞õÍ≥† ÏûëÏÑ±Îêú ÌôçÎ≥¥ÏÑ± Î¶¨Î∑∞, Í∏∞ÌÉÄ Ïù¥Ïú†Î°ú Ïã†Î¢∞ÏÑ±Ïù¥ Í≤∞Ïó¨Îêú Î¶¨Î∑∞Î•º Î™®Îëê Ìè¨Ìï®Ìï©ÎãàÎã§.\n' +
                '(ÎØ∏Íµ≠ FTC „ÄéFake Reviews and Testimonials Final Rule„Äè, 2024-08-14)\n\n' +
                '[ÌÉêÏßÄ Î∞©Î≤ï]\n' +
                '1. Î®∏Ïã†Îü¨Îãù 1Ï∞® ÌåêÎ≥Ñ ‚Äì Î¶¨Î∑∞ Î≥∏Î¨∏Í≥º Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Î•º Î™®Îç∏Î°ú Ïä§ÏΩîÏñ¥ÎßÅ\n' +
                '2. n-gram 2Ï∞® ÌïÑÌÑ∞ ‚Äì Í∞ÄÏßú Î¶¨Î∑∞ ÏΩîÌçºÏä§ÏóêÏÑú Ï∂îÏ∂úÌïú Îã®Ïñ¥¬∑ÌëúÌòÑÏúºÎ°ú Ïû¨Í≤ÄÏ¶ù\n' +
                '‚Üí Îëê Îã®Í≥ÑÎ•º Î™®Îëê ÌÜµÍ≥ºÌïú Í≤ΩÏö∞ÏóêÎßå ‚ÄúÍ∞ÄÏßú Î¶¨Î∑∞‚ÄùÎ°ú ÌëúÏãúÎê©ÎãàÎã§.\n\n' +
                '[ÏàòÏßë Îç∞Ïù¥ÌÑ∞ ¬∑ Î≥¥Ïïà]\n' +
                '- ÏàòÏßë Ìï≠Î™© : Î¶¨Î∑∞ Î≥∏Î¨∏, Î¶¨Î∑∞ ID, Ïù¥ÎØ∏ÏßÄ Ï≤®Î∂Ä Ïó¨Î∂Ä\n' +
                '- Ïù¥Î¶Ñ¬∑Ï£ºÏÜå¬∑Í≤∞Ï†úÏ†ïÎ≥¥ Îì± Í∞úÏù∏ ÏãùÎ≥Ñ Ï†ïÎ≥¥Îäî ÏàòÏßë¬∑Ï†ÄÏû•ÌïòÏßÄ ÏïäÏäµÎãàÎã§.\n\n' +
                '[Ï∞∏Í≥†Ïö© Í≥†ÏßÄ]\n' +
                'Î≥∏ Í≤∞Í≥ºÎäî Ï∞∏Í≥†Ïö©Ïù¥Î©∞, Ïò§Î•òÍ∞Ä ÏûàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.\n' +
                'ÏûòÎ™ª ÌëúÏãúÎêú ÏÇ¨Î°ÄÎ•º Î∞úÍ≤¨ÌïòÏãúÎ©¥ Ïã†Í≥†Ìï¥ Ï£ºÏãúÎ©¥ Í∞êÏÇ¨ÌïòÍ≤†ÏäµÎãàÎã§.',
            sensitivityTooltip: {
                low: '‚ùó ÎØºÍ∞ê: Í∞ÄÏßúÏùº Í∞ÄÎä•ÏÑ±Ïù¥ ÏûàÎäî Î¶¨Î∑∞ÍπåÏßÄ ÎÑìÍ≤å ÌÉêÏßÄÌï©ÎãàÎã§.',
                medium: '‚öñÔ∏è Í∑†Ìòï: Í∞ÄÏßúÎ°ú ÏùòÏã¨ÎêòÎäî Î¶¨Î∑∞Î•º Ï†ÅÏ†àÌïú Î≤îÏúÑÏóêÏÑú ÌÉêÏßÄÌï©ÎãàÎã§.',
                high: 'üéØ Ï†ïÎ∞Ä: Í∞ÄÏßúÏùº Í∞ÄÎä•ÏÑ±Ïù¥ Îß§Ïö∞ ÎÜíÏùÄ Î¶¨Î∑∞Îßå Ïã†Ï§ëÌïòÍ≤å ÌÉêÏßÄÌï©ÎãàÎã§.',
            },
        },
    }[language];

    const handleClick = () => {
        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
            const tab = tabs[0];
            if (!tab.id) return;

            chrome.scripting.executeScript({
                target: { tabId: tab.id },
                func: (sensitivity) => {
                    window.sensitivity = sensitivity;
                },
                args: [sensitivity],
            });

            chrome.scripting.executeScript({
                target: { tabId: tab.id },
                files: ['content.js'],
            });
        });
    };

    useEffect(() => {
        const handleClickOutside = (e: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(e.target as Node)) {
                setShowDropdown(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    return (
        <div
            style={{
                padding: '10px 60px 80px 60px',
                fontFamily: 'Segoe UI, sans-serif',
                background: '#f8f9fa',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'flex-start',
                width: '400px',
                gap: '40px',
                position: 'relative',
            }}
        >
            <div
                ref={dropdownRef}
                style={{
                    width: '100%',
                    display: 'flex',
                    justifyContent: 'flex-end',
                    alignItems: 'center',
                    gap: '8px',
                }}
            >
                <div
                    style={{ position: 'relative' }}
                    onMouseEnter={() => setShowTooltip(true)}
                    onMouseLeave={() => setShowTooltip(false)}
                >
                    <span style={{ fontSize: '18px', cursor: 'help' }}>‚ùî</span>
                    {showTooltip && (
                        <div
                            style={{
                                position: 'absolute',
                                top: '120%',
                                right: 0,
                                backgroundColor: '#fff',
                                color: '#333',
                                border: '1px solid #ccc',
                                borderRadius: '6px',
                                boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
                                padding: '10px 14px',
                                fontSize: '12px',
                                whiteSpace: 'pre-line',
                                zIndex: 1000,
                                width: '360px',
                            }}
                        >
                            {text.tooltip}
                        </div>
                    )}
                </div>

                <div style={{ position: 'relative' }}>
                    <button
                        onClick={() => setShowDropdown((prev) => !prev)}
                        style={{
                            background: 'transparent',
                            border: 'none',
                            fontSize: '18px',
                            cursor: 'pointer',
                        }}
                    >
                        üåê
                    </button>

                    {showDropdown && (
                        <div
                            style={{
                                position: 'absolute',
                                top: '120%',
                                right: 0,
                                background: '#fff',
                                border: '1px solid #ccc',
                                borderRadius: '6px',
                                boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
                                zIndex: 1000,
                            }}
                        >
                            <div
                                onClick={() => {
                                    setLanguage('en');
                                    setShowDropdown(false);
                                }}
                                style={{ padding: '8px 12px', cursor: 'pointer', whiteSpace: 'nowrap' }}
                            >
                                EN
                            </div>
                            <div
                                onClick={() => {
                                    setLanguage('ko');
                                    setShowDropdown(false);
                                }}
                                style={{ padding: '8px 12px', cursor: 'pointer', whiteSpace: 'nowrap' }}
                            >
                                ÌïúÍµ≠Ïñ¥
                            </div>
                        </div>
                    )}
                </div>
            </div>

            <h2 style={{ fontSize: '28px', fontWeight: 'bold', color: '#343a40', margin: 0 }}>
                {text.title}
            </h2>

            <div style={{ width: '100%', position: 'relative' }}>
                <p style={{ fontWeight: 600, marginBottom: '12px' }}>{text.sensitivity}</p>
                <div style={{ display: 'flex', gap: '8px' }}>
                    {['low', 'medium', 'high'].map((value, i) => (
                        <div key={value} style={{ position: 'relative', flex: 1 }}>
                            <button
                                onClick={() => setSensitivity(value)}
                                onMouseEnter={() => setHoveredSensitivity(value)}
                                onMouseLeave={() => setHoveredSensitivity(null)}
                                style={{
                                    width: '100%',
                                    padding: '10px 0',
                                    borderRadius: '6px',
                                    border: '1px solid',
                                    borderColor: sensitivity === value ? '#2c7df6' : '#ced4da',
                                    backgroundColor: sensitivity === value ? '#2c7df6' : '#fff',
                                    color: sensitivity === value ? '#fff' : '#495057',
                                    fontWeight: 600,
                                    cursor: 'pointer',
                                    transition: 'all 0.2s ease-in-out',
                                }}
                            >
                                {text.options[i]}
                            </button>
                            {hoveredSensitivity === value && (
                                <div
                                    style={{
                                        position: 'absolute',
                                        top: 'calc(100% + 8px)',
                                        left: '50%',
                                        transform: 'translateX(-50%)',
                                        backgroundColor: '#fff',
                                        color: '#333',
                                        border: '1px solid #ccc',
                                        borderRadius: '6px',
                                        boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
                                        padding: '8px 12px',
                                        fontSize: '12px',
                                        whiteSpace: 'pre-line',
                                        zIndex: 1000,
                                        width: '220px',
                                    }}
                                >
                                    {text.sensitivityTooltip[value as keyof typeof text.sensitivityTooltip]}
                                </div>
                            )}
                        </div>
                    ))}
                </div>
            </div>

            <button
                onClick={handleClick}
                style={{
                    width: '100%',
                    padding: '12px 0',
                    marginTop: '12px',
                    backgroundColor: '#2c7df6',
                    color: '#ffffff',
                    border: 'none',
                    borderRadius: '6px',
                    fontSize: '18px',
                    fontWeight: '500',
                    cursor: 'pointer',
                    transition: 'background-color 0.2s',
                }}
            >
                {text.start}
            </button>
        </div>
    );
}

export default App;
